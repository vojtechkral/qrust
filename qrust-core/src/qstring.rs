// Do not edit this file, it is auto-generated!

// Generated by qrust-gen
// Generator: GQString
// Template:  qstring_rs.mako
// Timestamp: 2016-08-07T09:35:27Z

use std::mem;
use libc::*;


mod glue {
	use libc::*;

	extern {
		pub fn _qrust_qstring_c_1() -> *mut c_void;
		pub fn _qrust_qstring_m_reserve(this: *mut c_void, size: c_int) -> ();
		pub fn _qrust_qstring_m_push_front1(this: *mut c_void, other: *mut c_void) -> ();
		pub fn _qrust_qstring_m_trimmed(this: *mut c_void) -> *mut c_void;
		pub fn _qrust_qstring_m_toUpper(this: *mut c_void) -> *mut c_void;
		pub fn _qrust_qstring_m_squeeze(this: *mut c_void) -> ();
		pub fn _qrust_qstring_m_length(this: *mut c_void) -> c_int;
		pub fn _qrust_qstring_m_right(this: *mut c_void, n: c_int) -> *mut c_void;
		pub fn _qrust_qstring_m_clear(this: *mut c_void) -> ();
		pub fn _qrust_qstring_m_left(this: *mut c_void, n: c_int) -> *mut c_void;
		pub fn _qrust_qstring_m_simplified(this: *mut c_void) -> *mut c_void;
		pub fn _qrust_qstring_m_isRightToLeft(this: *mut c_void) -> c_int;
		pub fn _qrust_qstring_m_mid(this: *mut c_void, position: c_int, n: c_int) -> *mut c_void;
		pub fn _qrust_qstring_m_isNull(this: *mut c_void) -> c_int;
		pub fn _qrust_qstring_m_chop(this: *mut c_void, n: c_int) -> ();
		pub fn _qrust_qstring_m_toHtmlEscaped(this: *mut c_void) -> *mut c_void;
		pub fn _qrust_qstring_m_size(this: *mut c_void) -> c_int;
		pub fn _qrust_qstring_m_capacity(this: *mut c_void) -> c_int;
		pub fn _qrust_qstring_m_truncate(this: *mut c_void, position: c_int) -> ();
		pub fn _qrust_qstring_m_repeated(this: *mut c_void, times: c_int) -> *mut c_void;
		pub fn _qrust_qstring_m_isEmpty(this: *mut c_void) -> c_int;
		pub fn _qrust_qstring_m_toLower(this: *mut c_void) -> *mut c_void;
		pub fn _qrust_qstring_m_resize0(this: *mut c_void, size: c_int) -> ();
		pub fn _qrust_qstring_m_toCaseFolded(this: *mut c_void) -> *mut c_void;
		pub fn _qrust_qstring_m_push_back1(this: *mut c_void, other: *mut c_void) -> ();
		pub fn _qrust_qstring_m_count0(this: *mut c_void) -> c_int;
		pub fn _qrust_qstring_m_localeAwareCompare0(this: *mut c_void, other: *mut c_void) -> c_int;
		
	pub fn _qrust_qstring_s_fromUtf8(str: *const c_char, size: c_int) -> *mut c_void;
	pub fn _qrust_qstring_x_utf16_tmp(this: *mut c_void) -> *const c_ushort;

	}
}

/// Unicode character string
pub struct QString(pub *mut c_void);

impl QString
{
	pub fn new() -> QString {
		QString(unsafe { glue::_qrust_qstring_c_1() })
	}

	#[allow(non_snake_case)]
	pub fn reserve(&self, size: i32) -> () {
		return unsafe { glue::_qrust_qstring_m_reserve(self.0, size as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn push_front(&self, other: QString) -> () {
		return unsafe { glue::_qrust_qstring_m_push_front1(self.0, other.0) };
	}

	#[allow(non_snake_case)]
	pub fn trimmed(&self) -> QString {
		return QString(unsafe { glue::_qrust_qstring_m_trimmed(self.0) });
	}

	#[allow(non_snake_case)]
	pub fn toUpper(&self) -> QString {
		return QString(unsafe { glue::_qrust_qstring_m_toUpper(self.0) });
	}

	#[allow(non_snake_case)]
	pub fn squeeze(&self) -> () {
		return unsafe { glue::_qrust_qstring_m_squeeze(self.0) };
	}

	#[allow(non_snake_case)]
	pub fn length(&self) -> i32 {
		return unsafe { glue::_qrust_qstring_m_length(self.0) } as i32;
	}

	#[allow(non_snake_case)]
	pub fn right(&self, n: i32) -> QString {
		return QString(unsafe { glue::_qrust_qstring_m_right(self.0, n as c_int) });
	}

	#[allow(non_snake_case)]
	pub fn clear(&self) -> () {
		return unsafe { glue::_qrust_qstring_m_clear(self.0) };
	}

	#[allow(non_snake_case)]
	pub fn left(&self, n: i32) -> QString {
		return QString(unsafe { glue::_qrust_qstring_m_left(self.0, n as c_int) });
	}

	#[allow(non_snake_case)]
	pub fn simplified(&self) -> QString {
		return QString(unsafe { glue::_qrust_qstring_m_simplified(self.0) });
	}

	#[allow(non_snake_case)]
	pub fn isRightToLeft(&self) -> bool {
		return unsafe { glue::_qrust_qstring_m_isRightToLeft(self.0) } != 0;
	}

	#[allow(non_snake_case)]
	pub fn mid(&self, position: i32, n: i32) -> QString {
		return QString(unsafe { glue::_qrust_qstring_m_mid(self.0, position as c_int, n as c_int) });
	}

	#[allow(non_snake_case)]
	pub fn isNull(&self) -> bool {
		return unsafe { glue::_qrust_qstring_m_isNull(self.0) } != 0;
	}

	#[allow(non_snake_case)]
	pub fn chop(&self, n: i32) -> () {
		return unsafe { glue::_qrust_qstring_m_chop(self.0, n as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn toHtmlEscaped(&self) -> QString {
		return QString(unsafe { glue::_qrust_qstring_m_toHtmlEscaped(self.0) });
	}

	#[allow(non_snake_case)]
	pub fn size(&self) -> i32 {
		return unsafe { glue::_qrust_qstring_m_size(self.0) } as i32;
	}

	#[allow(non_snake_case)]
	pub fn capacity(&self) -> i32 {
		return unsafe { glue::_qrust_qstring_m_capacity(self.0) } as i32;
	}

	#[allow(non_snake_case)]
	pub fn truncate(&self, position: i32) -> () {
		return unsafe { glue::_qrust_qstring_m_truncate(self.0, position as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn repeated(&self, times: i32) -> QString {
		return QString(unsafe { glue::_qrust_qstring_m_repeated(self.0, times as c_int) });
	}

	#[allow(non_snake_case)]
	pub fn isEmpty(&self) -> bool {
		return unsafe { glue::_qrust_qstring_m_isEmpty(self.0) } != 0;
	}

	#[allow(non_snake_case)]
	pub fn toLower(&self) -> QString {
		return QString(unsafe { glue::_qrust_qstring_m_toLower(self.0) });
	}

	#[allow(non_snake_case)]
	pub fn resize(&self, size: i32) -> () {
		return unsafe { glue::_qrust_qstring_m_resize0(self.0, size as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn toCaseFolded(&self) -> QString {
		return QString(unsafe { glue::_qrust_qstring_m_toCaseFolded(self.0) });
	}

	#[allow(non_snake_case)]
	pub fn push_back(&self, other: QString) -> () {
		return unsafe { glue::_qrust_qstring_m_push_back1(self.0, other.0) };
	}

	#[allow(non_snake_case)]
	pub fn count(&self) -> i32 {
		return unsafe { glue::_qrust_qstring_m_count0(self.0) } as i32;
	}

	#[allow(non_snake_case)]
	pub fn localeAwareCompare(&self, other: QString) -> i32 {
		return unsafe { glue::_qrust_qstring_m_localeAwareCompare0(self.0, other.0) } as i32;
	}


	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn toInt(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn contains0(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn contains1(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn contains2(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn contains3(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn contains4(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn contains5(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn contains6(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn contains7(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn compare0(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn compare1(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn compare2(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn swap(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn toCFString(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn push_front0(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn crbegin(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn toFloat(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn unicode(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn append0(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn append1(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn append2(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn append3(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn append4(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn append5(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn append6(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn toUShort(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn rightRef(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn fill(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn insert0(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn insert1(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn insert2(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn insert3(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn insert4(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn insert5(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn insert6(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn rbegin0(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn rbegin1(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn lastIndexOf0(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn lastIndexOf1(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn lastIndexOf2(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn lastIndexOf3(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn lastIndexOf4(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn lastIndexOf5(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn lastIndexOf6(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn lastIndexOf7(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn toAscii(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn toUcs4(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn constData(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn toStdU32String(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn splitRef0(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn splitRef1(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn splitRef2(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn splitRef3(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn section0(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn section1(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn section2(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn section3(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn normalized(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn data0(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn data1(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn utf16(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn indexOf0(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn indexOf1(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn indexOf2(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn indexOf3(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn indexOf4(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn indexOf5(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn indexOf6(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn indexOf7(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn prepend0(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn prepend1(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn prepend2(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn prepend3(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn prepend4(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn prepend5(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn prepend6(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn leftJustified(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn vsprintf(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn crend(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn setNum0(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn setNum1(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn setNum2(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn setNum3(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn setNum4(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn setNum5(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn setNum6(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn setNum7(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn setNum8(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn setNum9(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn leftRef(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn remove0(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn remove1(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn remove2(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn remove3(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn remove4(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn toULongLong(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn toWCharArray(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn toLatin1(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn split0(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn split1(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn split2(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn split3(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn toNSString(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn replace0(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn replace1(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn replace2(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn replace3(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn replace4(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn replace5(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn replace6(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn replace7(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn replace8(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn replace9(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn replace10(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn replace11(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn replace12(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn toDouble(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn sprintf(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn midRef(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn cbegin(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn toLocal8Bit(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn constBegin(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn setUtf16(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn toUInt(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn toStdU16String(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn constEnd(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn endsWith0(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn endsWith1(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn endsWith2(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn endsWith3(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn begin0(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn begin1(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn setUnicode(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn toUtf8(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn toStdString(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn cend(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn end0(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn end1(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn toULong(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn rend0(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn rend1(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn rightJustified(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn toStdWString(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn resize1(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn startsWith0(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn startsWith1(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn startsWith2(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn startsWith3(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn toLong(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn toShort(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn at(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn push_back0(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn count1(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn count2(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn count3(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn count4(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn count5(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn setRawData(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn localeAwareCompare1(&self /* pk */) -> ! {
		unimplemented!();
	}

	/// **Unimplemented**
	#[allow(non_snake_case)]
	pub fn toLongLong(&self /* pk */) -> ! {
		unimplemented!();
	}

}

// TODO: Drop





use std::convert::{From, Into};
use std::slice;


impl From<String> for QString {
	fn from(s: String) -> QString {
		QString(unsafe { glue::_qrust_qstring_s_fromUtf8(s.as_ptr() as *const c_char,
			s.len() as c_int) })
	}
}

impl Into<String> for QString {
	fn into(self) -> String {
		// FIXME: tmp
		let len = self.length();
		let utf16 = unsafe { glue::_qrust_qstring_x_utf16_tmp(self.0) };
		String::from_utf16(unsafe { slice::from_raw_parts(utf16, len as usize) }).unwrap()
	}
}


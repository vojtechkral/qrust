// Do not edit this file, it is auto-generated!

// Generated by qrust-gen
// Generator: GQObjectVtable
// Template:  qobject_vtable_rs.mako
// Timestamp: 2016-08-07T09:35:27Z

use std::mem;
use std::ptr::null_mut;
use libc::*;

use ::qr_core::{TraitObject, FatPtr, QPtr, AsQPtr, Connection, Slot, IntoSlot};


// GLUE DECLS

mod glue {
	use libc::*;
	use ::qr_core::TraitObject;

	extern {

  pub fn _qrust_qwidget_c_1(vself: *mut c_void, vtable: *const c_void) -> *mut c_void;

		pub fn _qrust_qwidget_m_accessibleName(this: *mut c_void) -> *mut c_void;
		pub fn _qrust_qwidget_m_setWindowTitle(this: *mut c_void, arg0: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_isMaximized(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_unsetLayoutDirection(this: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_scroll0(this: *mut c_void, dx: c_int, dy: c_int) -> ();
		pub fn _qrust_qwidget_m_width(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_setShortcutEnabled(this: *mut c_void, id: c_int, enable: c_int) -> ();
		pub fn _qrust_qwidget_m_repaint0(this: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_repaint3(this: *mut c_void, x: c_int, y: c_int, w: c_int, h: c_int) -> ();
		pub fn _qrust_qwidget_m_hide(this: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_hasFocus(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_activateWindow(this: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_update0(this: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_update3(this: *mut c_void, x: c_int, y: c_int, w: c_int, h: c_int) -> ();
		pub fn _qrust_qwidget_m_setAccessibleName(this: *mut c_void, name: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_setStyleSheet(this: *mut c_void, styleSheet: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_statusTip(this: *mut c_void) -> *mut c_void;
		pub fn _qrust_qwidget_m_close(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_windowIconText(this: *mut c_void) -> *mut c_void;
		pub fn _qrust_qwidget_m_setShortcutAutoRepeat(this: *mut c_void, id: c_int, enable: c_int) -> ();
		pub fn _qrust_qwidget_m_setAccessibleDescription(this: *mut c_void, description: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_setWindowFilePath(this: *mut c_void, filePath: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_move1(this: *mut c_void, x: c_int, y: c_int) -> ();
		pub fn _qrust_qwidget_m_setContentsMargins1(this: *mut c_void, left: c_int, top: c_int, right: c_int, bottom: c_int) -> ();
		pub fn _qrust_qwidget_m_hasMouseTracking(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_setToolTipDuration(this: *mut c_void, msec: c_int) -> ();
		pub fn _qrust_qwidget_m_lower(this: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_underMouse(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_toolTip(this: *mut c_void) -> *mut c_void;
		pub fn _qrust_qwidget_m_isModal(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_maximumHeight(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_acceptDrops(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_setDisabled(this: *mut c_void, disable: c_int) -> ();
		pub fn _qrust_qwidget_m_resize1(this: *mut c_void, w: c_int, h: c_int) -> ();
		pub fn _qrust_qwidget_m_toolTipDuration(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_setFocus0(this: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_setFixedHeight(this: *mut c_void, h: c_int) -> ();
		pub fn _qrust_qwidget_m_setMinimumSize1(this: *mut c_void, minw: c_int, minh: c_int) -> ();
		pub fn _qrust_qwidget_m_setAutoFillBackground(this: *mut c_void, enabled: c_int) -> ();
		pub fn _qrust_qwidget_m_minimumHeight(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_grabKeyboard(this: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_showNormal(this: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_windowRole(this: *mut c_void) -> *mut c_void;
		pub fn _qrust_qwidget_m_ensurePolished(this: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_isVisible(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_setStatusTip(this: *mut c_void, arg0: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_showMaximized(this: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_grabMouse0(this: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_setWindowModified(this: *mut c_void, arg0: c_int) -> ();
		pub fn _qrust_qwidget_m_maximumWidth(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_setBaseSize1(this: *mut c_void, basew: c_int, baseh: c_int) -> ();
		pub fn _qrust_qwidget_m_unsetLocale(this: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_clearFocus(this: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_isFullScreen(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_setEnabled(this: *mut c_void, arg0: c_int) -> ();
		pub fn _qrust_qwidget_m_show(this: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_y(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_showMinimized(this: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_unsetCursor(this: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_setWindowIconText(this: *mut c_void, arg0: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_setMouseTracking(this: *mut c_void, enable: c_int) -> ();
		pub fn _qrust_qwidget_m_accessibleDescription(this: *mut c_void) -> *mut c_void;
		pub fn _qrust_qwidget_m_isEnabled(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_releaseMouse(this: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_isWindow(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_setGeometry1(this: *mut c_void, x: c_int, y: c_int, w: c_int, h: c_int) -> ();
		pub fn _qrust_qwidget_m_setMinimumWidth(this: *mut c_void, minw: c_int) -> ();
		pub fn _qrust_qwidget_m_isHidden(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_releaseKeyboard(this: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_updatesEnabled(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_minimumWidth(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_setAcceptDrops(this: *mut c_void, on: c_int) -> ();
		pub fn _qrust_qwidget_m_updateGeometry(this: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_isWindowModified(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_setMaximumSize1(this: *mut c_void, maxw: c_int, maxh: c_int) -> ();
		pub fn _qrust_qwidget_m_styleSheet(this: *mut c_void) -> *mut c_void;
		pub fn _qrust_qwidget_m_setToolTip(this: *mut c_void, arg0: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_setSizeIncrement1(this: *mut c_void, w: c_int, h: c_int) -> ();
		pub fn _qrust_qwidget_m_windowFilePath(this: *mut c_void) -> *mut c_void;
		pub fn _qrust_qwidget_m_setMaximumWidth(this: *mut c_void, maxw: c_int) -> ();
		pub fn _qrust_qwidget_m_setHidden(this: *mut c_void, hidden: c_int) -> ();
		pub fn _qrust_qwidget_m_showFullScreen(this: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_whatsThis(this: *mut c_void) -> *mut c_void;
		pub fn _qrust_qwidget_m_releaseShortcut(this: *mut c_void, id: c_int) -> ();
		pub fn _qrust_qwidget_m_setWhatsThis(this: *mut c_void, arg0: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_setMaximumHeight(this: *mut c_void, maxh: c_int) -> ();
		pub fn _qrust_qwidget_m_setUpdatesEnabled(this: *mut c_void, enable: c_int) -> ();
		pub fn _qrust_qwidget_m_adjustSize(this: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_isEnabledToTLW(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_isTopLevel(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_setMinimumHeight(this: *mut c_void, minh: c_int) -> ();
		pub fn _qrust_qwidget_m_isActiveWindow(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_windowTitle(this: *mut c_void) -> *mut c_void;
		pub fn _qrust_qwidget_m_raise(this: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_x(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_height(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_clearMask(this: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_setFixedWidth(this: *mut c_void, w: c_int) -> ();
		pub fn _qrust_qwidget_m_setFixedSize0(this: *mut c_void, w: c_int, h: c_int) -> ();
		pub fn _qrust_qwidget_m_isMinimized(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_m_setWindowRole(this: *mut c_void, role: *mut c_void) -> ();
		pub fn _qrust_qwidget_m_autoFillBackground(this: *mut c_void) -> c_int;
		pub fn _qrust_qwidget_C_windowIconTextChanged(obj: *mut c_void, callback: TraitObject, closure: c_int) -> *mut c_void;
		pub fn _qrust_qwidget_C_windowTitleChanged(obj: *mut c_void, callback: TraitObject, closure: c_int) -> *mut c_void;
		
	pub fn _qrust_qwidget_m_heightForWidth(this: *mut c_void, w: c_int) -> c_int;
	pub fn _qrust_qwidget_v_heightForWidth(this: *mut c_void, w: c_int) -> c_int;
	pub fn _qrust_qwidget_m_setVisible(this: *mut c_void, visible: c_int) -> ();
	pub fn _qrust_qwidget_v_setVisible(this: *mut c_void, visible: c_int) -> ();
	pub fn _qrust_qwidget_m_hasHeightForWidth(this: *mut c_void) -> c_int;
	pub fn _qrust_qwidget_v_hasHeightForWidth(this: *mut c_void) -> c_int;

	}
}

// NATIVE SLOTS
// TODO

pub mod slot
{
	#[allow(non_snake_case)]
	pub mod QWidget
	{
		use ::qr_core::{AsQPtr, TraitObject, Slot};

		mod glue {
			use libc::*;

			extern {
				pub static mut _qrust_qwidget_S_close: *mut c_void;
			}
		}

		pub fn close(qobj: &::QWidget) -> Slot
		{
			Slot::Native(TraitObject
			{
				data: qobj.qptr(),
				vtable: unsafe { glue::_qrust_qwidget_S_close },
			})
		}
	}
}


// CLASS

/// The base class of all user interface objects
pub struct QWidget(QPtr);

impl QWidget
{

	pub fn new() -> QWidget {
		QWidget(unsafe { glue::_qrust_qwidget_c_1(null_mut(), null_mut()) })
	}

	pub fn new_null() -> QWidget {
		QWidget(null_mut())
	}

	pub fn with_vtable<T: VWidget>(obj: T) -> Box<T> {
		let mut ret = Box::new(obj);
		let vself: *mut c_void = unsafe { mem::transmute(&*ret) };
		let vtable = unsafe { T::_qrust_vtable() };
		ret.set_qptr(unsafe { glue::_qrust_qwidget_c_1(vself, vtable) });
		ret
	}

	pub fn repaint<T: RepaintArgs>(&self, args: T) -> () {
		args.call(self.0)
	}


	// MEMBERS

	#[allow(non_snake_case)]
	pub fn accessibleName(&self) -> QString {
		return QString(unsafe { glue::_qrust_qwidget_m_accessibleName(self.0) });
	}

	#[allow(non_snake_case)]
	pub fn setWindowTitle(&self, arg0: QString) -> () {
		return unsafe { glue::_qrust_qwidget_m_setWindowTitle(self.0, arg0.0) };
	}

	#[allow(non_snake_case)]
	pub fn isMaximized(&self) -> bool {
		return unsafe { glue::_qrust_qwidget_m_isMaximized(self.0) } != 0;
	}

	#[allow(non_snake_case)]
	pub fn unsetLayoutDirection(&self) -> () {
		return unsafe { glue::_qrust_qwidget_m_unsetLayoutDirection(self.0) };
	}

	#[allow(non_snake_case)]
	pub fn scroll0(&self, dx: i32, dy: i32) -> () {
		return unsafe { glue::_qrust_qwidget_m_scroll0(self.0, dx as c_int, dy as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn width(&self) -> i32 {
		return unsafe { glue::_qrust_qwidget_m_width(self.0) } as i32;
	}

	#[allow(non_snake_case)]
	pub fn setShortcutEnabled(&self, id: i32, enable: bool) -> () {
		return unsafe { glue::_qrust_qwidget_m_setShortcutEnabled(self.0, id as c_int, enable as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn repaint0(&self) -> () {
		return unsafe { glue::_qrust_qwidget_m_repaint0(self.0) };
	}

	#[allow(non_snake_case)]
	pub fn repaint3(&self, x: i32, y: i32, w: i32, h: i32) -> () {
		return unsafe { glue::_qrust_qwidget_m_repaint3(self.0, x as c_int, y as c_int, w as c_int, h as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn hide(&self) -> () {
		return unsafe { glue::_qrust_qwidget_m_hide(self.0) };
	}

	#[allow(non_snake_case)]
	pub fn hasFocus(&self) -> bool {
		return unsafe { glue::_qrust_qwidget_m_hasFocus(self.0) } != 0;
	}

	#[allow(non_snake_case)]
	pub fn activateWindow(&self) -> () {
		return unsafe { glue::_qrust_qwidget_m_activateWindow(self.0) };
	}

	#[allow(non_snake_case)]
	pub fn update0(&self) -> () {
		return unsafe { glue::_qrust_qwidget_m_update0(self.0) };
	}

	#[allow(non_snake_case)]
	pub fn update3(&self, x: i32, y: i32, w: i32, h: i32) -> () {
		return unsafe { glue::_qrust_qwidget_m_update3(self.0, x as c_int, y as c_int, w as c_int, h as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn setAccessibleName(&self, name: QString) -> () {
		return unsafe { glue::_qrust_qwidget_m_setAccessibleName(self.0, name.0) };
	}

	#[allow(non_snake_case)]
	pub fn setStyleSheet(&self, styleSheet: QString) -> () {
		return unsafe { glue::_qrust_qwidget_m_setStyleSheet(self.0, styleSheet.0) };
	}

	#[allow(non_snake_case)]
	pub fn statusTip(&self) -> QString {
		return QString(unsafe { glue::_qrust_qwidget_m_statusTip(self.0) });
	}

	#[allow(non_snake_case)]
	pub fn close(&self) -> bool {
		return unsafe { glue::_qrust_qwidget_m_close(self.0) } != 0;
	}

	#[allow(non_snake_case)]
	pub fn windowIconText(&self) -> QString {
		return QString(unsafe { glue::_qrust_qwidget_m_windowIconText(self.0) });
	}

	#[allow(non_snake_case)]
	pub fn setShortcutAutoRepeat(&self, id: i32, enable: bool) -> () {
		return unsafe { glue::_qrust_qwidget_m_setShortcutAutoRepeat(self.0, id as c_int, enable as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn setAccessibleDescription(&self, description: QString) -> () {
		return unsafe { glue::_qrust_qwidget_m_setAccessibleDescription(self.0, description.0) };
	}

	#[allow(non_snake_case)]
	pub fn setWindowFilePath(&self, filePath: QString) -> () {
		return unsafe { glue::_qrust_qwidget_m_setWindowFilePath(self.0, filePath.0) };
	}

	#[allow(non_snake_case)]
	pub fn move1(&self, x: i32, y: i32) -> () {
		return unsafe { glue::_qrust_qwidget_m_move1(self.0, x as c_int, y as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn setContentsMargins1(&self, left: i32, top: i32, right: i32, bottom: i32) -> () {
		return unsafe { glue::_qrust_qwidget_m_setContentsMargins1(self.0, left as c_int, top as c_int, right as c_int, bottom as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn hasMouseTracking(&self) -> bool {
		return unsafe { glue::_qrust_qwidget_m_hasMouseTracking(self.0) } != 0;
	}

	#[allow(non_snake_case)]
	pub fn setToolTipDuration(&self, msec: i32) -> () {
		return unsafe { glue::_qrust_qwidget_m_setToolTipDuration(self.0, msec as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn lower(&self) -> () {
		return unsafe { glue::_qrust_qwidget_m_lower(self.0) };
	}

	#[allow(non_snake_case)]
	pub fn underMouse(&self) -> bool {
		return unsafe { glue::_qrust_qwidget_m_underMouse(self.0) } != 0;
	}

	#[allow(non_snake_case)]
	pub fn toolTip(&self) -> QString {
		return QString(unsafe { glue::_qrust_qwidget_m_toolTip(self.0) });
	}

	#[allow(non_snake_case)]
	pub fn isModal(&self) -> bool {
		return unsafe { glue::_qrust_qwidget_m_isModal(self.0) } != 0;
	}

	#[allow(non_snake_case)]
	pub fn maximumHeight(&self) -> i32 {
		return unsafe { glue::_qrust_qwidget_m_maximumHeight(self.0) } as i32;
	}

	#[allow(non_snake_case)]
	pub fn acceptDrops(&self) -> bool {
		return unsafe { glue::_qrust_qwidget_m_acceptDrops(self.0) } != 0;
	}

	#[allow(non_snake_case)]
	pub fn setDisabled(&self, disable: bool) -> () {
		return unsafe { glue::_qrust_qwidget_m_setDisabled(self.0, disable as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn resize1(&self, w: i32, h: i32) -> () {
		return unsafe { glue::_qrust_qwidget_m_resize1(self.0, w as c_int, h as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn toolTipDuration(&self) -> i32 {
		return unsafe { glue::_qrust_qwidget_m_toolTipDuration(self.0) } as i32;
	}

	#[allow(non_snake_case)]
	pub fn setFocus0(&self) -> () {
		return unsafe { glue::_qrust_qwidget_m_setFocus0(self.0) };
	}

	#[allow(non_snake_case)]
	pub fn setFixedHeight(&self, h: i32) -> () {
		return unsafe { glue::_qrust_qwidget_m_setFixedHeight(self.0, h as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn setMinimumSize1(&self, minw: i32, minh: i32) -> () {
		return unsafe { glue::_qrust_qwidget_m_setMinimumSize1(self.0, minw as c_int, minh as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn setAutoFillBackground(&self, enabled: bool) -> () {
		return unsafe { glue::_qrust_qwidget_m_setAutoFillBackground(self.0, enabled as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn minimumHeight(&self) -> i32 {
		return unsafe { glue::_qrust_qwidget_m_minimumHeight(self.0) } as i32;
	}

	#[allow(non_snake_case)]
	pub fn grabKeyboard(&self) -> () {
		return unsafe { glue::_qrust_qwidget_m_grabKeyboard(self.0) };
	}

	#[allow(non_snake_case)]
	pub fn showNormal(&self) -> () {
		return unsafe { glue::_qrust_qwidget_m_showNormal(self.0) };
	}

	#[allow(non_snake_case)]
	pub fn windowRole(&self) -> QString {
		return QString(unsafe { glue::_qrust_qwidget_m_windowRole(self.0) });
	}

	#[allow(non_snake_case)]
	pub fn ensurePolished(&self) -> () {
		return unsafe { glue::_qrust_qwidget_m_ensurePolished(self.0) };
	}

	#[allow(non_snake_case)]
	pub fn isVisible(&self) -> bool {
		return unsafe { glue::_qrust_qwidget_m_isVisible(self.0) } != 0;
	}

	#[allow(non_snake_case)]
	pub fn setStatusTip(&self, arg0: QString) -> () {
		return unsafe { glue::_qrust_qwidget_m_setStatusTip(self.0, arg0.0) };
	}

	#[allow(non_snake_case)]
	pub fn showMaximized(&self) -> () {
		return unsafe { glue::_qrust_qwidget_m_showMaximized(self.0) };
	}

	#[allow(non_snake_case)]
	pub fn grabMouse0(&self) -> () {
		return unsafe { glue::_qrust_qwidget_m_grabMouse0(self.0) };
	}

	#[allow(non_snake_case)]
	pub fn setWindowModified(&self, arg0: bool) -> () {
		return unsafe { glue::_qrust_qwidget_m_setWindowModified(self.0, arg0 as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn maximumWidth(&self) -> i32 {
		return unsafe { glue::_qrust_qwidget_m_maximumWidth(self.0) } as i32;
	}

	#[allow(non_snake_case)]
	pub fn setBaseSize1(&self, basew: i32, baseh: i32) -> () {
		return unsafe { glue::_qrust_qwidget_m_setBaseSize1(self.0, basew as c_int, baseh as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn unsetLocale(&self) -> () {
		return unsafe { glue::_qrust_qwidget_m_unsetLocale(self.0) };
	}

	#[allow(non_snake_case)]
	pub fn clearFocus(&self) -> () {
		return unsafe { glue::_qrust_qwidget_m_clearFocus(self.0) };
	}

	#[allow(non_snake_case)]
	pub fn isFullScreen(&self) -> bool {
		return unsafe { glue::_qrust_qwidget_m_isFullScreen(self.0) } != 0;
	}

	#[allow(non_snake_case)]
	pub fn setEnabled(&self, arg0: bool) -> () {
		return unsafe { glue::_qrust_qwidget_m_setEnabled(self.0, arg0 as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn show(&self) -> () {
		return unsafe { glue::_qrust_qwidget_m_show(self.0) };
	}

	#[allow(non_snake_case)]
	pub fn y(&self) -> i32 {
		return unsafe { glue::_qrust_qwidget_m_y(self.0) } as i32;
	}

	#[allow(non_snake_case)]
	pub fn showMinimized(&self) -> () {
		return unsafe { glue::_qrust_qwidget_m_showMinimized(self.0) };
	}

	#[allow(non_snake_case)]
	pub fn unsetCursor(&self) -> () {
		return unsafe { glue::_qrust_qwidget_m_unsetCursor(self.0) };
	}

	#[allow(non_snake_case)]
	pub fn setWindowIconText(&self, arg0: QString) -> () {
		return unsafe { glue::_qrust_qwidget_m_setWindowIconText(self.0, arg0.0) };
	}

	#[allow(non_snake_case)]
	pub fn setMouseTracking(&self, enable: bool) -> () {
		return unsafe { glue::_qrust_qwidget_m_setMouseTracking(self.0, enable as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn accessibleDescription(&self) -> QString {
		return QString(unsafe { glue::_qrust_qwidget_m_accessibleDescription(self.0) });
	}

	#[allow(non_snake_case)]
	pub fn isEnabled(&self) -> bool {
		return unsafe { glue::_qrust_qwidget_m_isEnabled(self.0) } != 0;
	}

	#[allow(non_snake_case)]
	pub fn releaseMouse(&self) -> () {
		return unsafe { glue::_qrust_qwidget_m_releaseMouse(self.0) };
	}

	#[allow(non_snake_case)]
	pub fn isWindow(&self) -> bool {
		return unsafe { glue::_qrust_qwidget_m_isWindow(self.0) } != 0;
	}

	#[allow(non_snake_case)]
	pub fn setGeometry1(&self, x: i32, y: i32, w: i32, h: i32) -> () {
		return unsafe { glue::_qrust_qwidget_m_setGeometry1(self.0, x as c_int, y as c_int, w as c_int, h as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn setMinimumWidth(&self, minw: i32) -> () {
		return unsafe { glue::_qrust_qwidget_m_setMinimumWidth(self.0, minw as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn isHidden(&self) -> bool {
		return unsafe { glue::_qrust_qwidget_m_isHidden(self.0) } != 0;
	}

	#[allow(non_snake_case)]
	pub fn releaseKeyboard(&self) -> () {
		return unsafe { glue::_qrust_qwidget_m_releaseKeyboard(self.0) };
	}

	#[allow(non_snake_case)]
	pub fn updatesEnabled(&self) -> bool {
		return unsafe { glue::_qrust_qwidget_m_updatesEnabled(self.0) } != 0;
	}

	#[allow(non_snake_case)]
	pub fn minimumWidth(&self) -> i32 {
		return unsafe { glue::_qrust_qwidget_m_minimumWidth(self.0) } as i32;
	}

	#[allow(non_snake_case)]
	pub fn setAcceptDrops(&self, on: bool) -> () {
		return unsafe { glue::_qrust_qwidget_m_setAcceptDrops(self.0, on as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn updateGeometry(&self) -> () {
		return unsafe { glue::_qrust_qwidget_m_updateGeometry(self.0) };
	}

	#[allow(non_snake_case)]
	pub fn isWindowModified(&self) -> bool {
		return unsafe { glue::_qrust_qwidget_m_isWindowModified(self.0) } != 0;
	}

	#[allow(non_snake_case)]
	pub fn setMaximumSize1(&self, maxw: i32, maxh: i32) -> () {
		return unsafe { glue::_qrust_qwidget_m_setMaximumSize1(self.0, maxw as c_int, maxh as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn styleSheet(&self) -> QString {
		return QString(unsafe { glue::_qrust_qwidget_m_styleSheet(self.0) });
	}

	#[allow(non_snake_case)]
	pub fn setToolTip(&self, arg0: QString) -> () {
		return unsafe { glue::_qrust_qwidget_m_setToolTip(self.0, arg0.0) };
	}

	#[allow(non_snake_case)]
	pub fn setSizeIncrement1(&self, w: i32, h: i32) -> () {
		return unsafe { glue::_qrust_qwidget_m_setSizeIncrement1(self.0, w as c_int, h as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn windowFilePath(&self) -> QString {
		return QString(unsafe { glue::_qrust_qwidget_m_windowFilePath(self.0) });
	}

	#[allow(non_snake_case)]
	pub fn setMaximumWidth(&self, maxw: i32) -> () {
		return unsafe { glue::_qrust_qwidget_m_setMaximumWidth(self.0, maxw as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn setHidden(&self, hidden: bool) -> () {
		return unsafe { glue::_qrust_qwidget_m_setHidden(self.0, hidden as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn showFullScreen(&self) -> () {
		return unsafe { glue::_qrust_qwidget_m_showFullScreen(self.0) };
	}

	#[allow(non_snake_case)]
	pub fn whatsThis(&self) -> QString {
		return QString(unsafe { glue::_qrust_qwidget_m_whatsThis(self.0) });
	}

	#[allow(non_snake_case)]
	pub fn releaseShortcut(&self, id: i32) -> () {
		return unsafe { glue::_qrust_qwidget_m_releaseShortcut(self.0, id as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn setWhatsThis(&self, arg0: QString) -> () {
		return unsafe { glue::_qrust_qwidget_m_setWhatsThis(self.0, arg0.0) };
	}

	#[allow(non_snake_case)]
	pub fn setMaximumHeight(&self, maxh: i32) -> () {
		return unsafe { glue::_qrust_qwidget_m_setMaximumHeight(self.0, maxh as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn setUpdatesEnabled(&self, enable: bool) -> () {
		return unsafe { glue::_qrust_qwidget_m_setUpdatesEnabled(self.0, enable as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn adjustSize(&self) -> () {
		return unsafe { glue::_qrust_qwidget_m_adjustSize(self.0) };
	}

	#[allow(non_snake_case)]
	pub fn isEnabledToTLW(&self) -> bool {
		return unsafe { glue::_qrust_qwidget_m_isEnabledToTLW(self.0) } != 0;
	}

	#[allow(non_snake_case)]
	pub fn isTopLevel(&self) -> bool {
		return unsafe { glue::_qrust_qwidget_m_isTopLevel(self.0) } != 0;
	}

	#[allow(non_snake_case)]
	pub fn setMinimumHeight(&self, minh: i32) -> () {
		return unsafe { glue::_qrust_qwidget_m_setMinimumHeight(self.0, minh as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn isActiveWindow(&self) -> bool {
		return unsafe { glue::_qrust_qwidget_m_isActiveWindow(self.0) } != 0;
	}

	#[allow(non_snake_case)]
	pub fn windowTitle(&self) -> QString {
		return QString(unsafe { glue::_qrust_qwidget_m_windowTitle(self.0) });
	}

	#[allow(non_snake_case)]
	pub fn raise(&self) -> () {
		return unsafe { glue::_qrust_qwidget_m_raise(self.0) };
	}

	#[allow(non_snake_case)]
	pub fn x(&self) -> i32 {
		return unsafe { glue::_qrust_qwidget_m_x(self.0) } as i32;
	}

	#[allow(non_snake_case)]
	pub fn height(&self) -> i32 {
		return unsafe { glue::_qrust_qwidget_m_height(self.0) } as i32;
	}

	#[allow(non_snake_case)]
	pub fn clearMask(&self) -> () {
		return unsafe { glue::_qrust_qwidget_m_clearMask(self.0) };
	}

	#[allow(non_snake_case)]
	pub fn setFixedWidth(&self, w: i32) -> () {
		return unsafe { glue::_qrust_qwidget_m_setFixedWidth(self.0, w as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn setFixedSize0(&self, w: i32, h: i32) -> () {
		return unsafe { glue::_qrust_qwidget_m_setFixedSize0(self.0, w as c_int, h as c_int) };
	}

	#[allow(non_snake_case)]
	pub fn isMinimized(&self) -> bool {
		return unsafe { glue::_qrust_qwidget_m_isMinimized(self.0) } != 0;
	}

	#[allow(non_snake_case)]
	pub fn setWindowRole(&self, role: QString) -> () {
		return unsafe { glue::_qrust_qwidget_m_setWindowRole(self.0, role.0) };
	}

	#[allow(non_snake_case)]
	pub fn autoFillBackground(&self) -> bool {
		return unsafe { glue::_qrust_qwidget_m_autoFillBackground(self.0) } != 0;
	}


	// UNSUPPORTEDS

	/// **Unimplemented:** `QWidget::backingStore()`
	#[allow(non_snake_case)]
	pub fn backingStore(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::sizePolicy()`
	#[allow(non_snake_case)]
	pub fn sizePolicy(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::childrenRegion()`
	#[allow(non_snake_case)]
	pub fn childrenRegion(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::mapToGlobal(pos)`
	#[allow(non_snake_case)]
	pub fn mapToGlobal(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::restoreGeometry(geometry)`
	#[allow(non_snake_case)]
	pub fn restoreGeometry(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setForegroundRole(role)`
	#[allow(non_snake_case)]
	pub fn setForegroundRole(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setAttribute(attribute, on)`
	#[allow(non_snake_case)]
	pub fn setAttribute(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::scroll(dx, dy, r)`
	#[allow(non_snake_case)]
	pub fn scroll1(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::nextInFocusChain()`
	#[allow(non_snake_case)]
	pub fn nextInFocusChain(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::removeAction(action)`
	#[allow(non_snake_case)]
	pub fn removeAction(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::repaint(rect)`
	#[allow(non_snake_case)]
	pub fn repaint1(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::repaint(rgn)`
	#[allow(non_snake_case)]
	pub fn repaint2(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::windowType()`
	#[allow(non_snake_case)]
	pub fn windowType(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::fontInfo()`
	#[allow(non_snake_case)]
	pub fn fontInfo(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::windowIcon()`
	#[allow(non_snake_case)]
	pub fn windowIcon(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::palette()`
	#[allow(non_snake_case)]
	pub fn palette(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::mapFrom(parent, pos)`
	#[allow(non_snake_case)]
	pub fn mapFrom(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::getContentsMargins(left, top, right, bottom)`
	#[allow(non_snake_case)]
	pub fn getContentsMargins(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::testAttribute(attribute)`
	#[allow(non_snake_case)]
	pub fn testAttribute(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::paintEngine()`
	#[allow(non_snake_case)]
	pub fn paintEngine(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::sizeHint()`
	#[allow(non_snake_case)]
	pub fn sizeHint(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::baseSize()`
	#[allow(non_snake_case)]
	pub fn baseSize(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setMask(bitmap)`
	#[allow(non_snake_case)]
	pub fn setMask0(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setMask(region)`
	#[allow(non_snake_case)]
	pub fn setMask1(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::grabShortcut(key, context)`
	#[allow(non_snake_case)]
	pub fn grabShortcut(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::update(rect)`
	#[allow(non_snake_case)]
	pub fn update1(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::update(rgn)`
	#[allow(non_snake_case)]
	pub fn update2(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::minimumSizeHint()`
	#[allow(non_snake_case)]
	pub fn minimumSizeHint(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::fontMetrics()`
	#[allow(non_snake_case)]
	pub fn fontMetrics(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::grabGesture(gesture, flags)`
	#[allow(non_snake_case)]
	pub fn grabGesture(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::mask()`
	#[allow(non_snake_case)]
	pub fn mask(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::topLevelWidget()`
	#[allow(non_snake_case)]
	pub fn topLevelWidget(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setLocale(locale)`
	#[allow(non_snake_case)]
	pub fn setLocale(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::locale()`
	#[allow(non_snake_case)]
	pub fn locale(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::sizeIncrement()`
	#[allow(non_snake_case)]
	pub fn sizeIncrement(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setInputMethodHints(hints)`
	#[allow(non_snake_case)]
	pub fn setInputMethodHints(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::inputMethodHints()`
	#[allow(non_snake_case)]
	pub fn inputMethodHints(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setLayoutDirection(direction)`
	#[allow(non_snake_case)]
	pub fn setLayoutDirection(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::windowModality()`
	#[allow(non_snake_case)]
	pub fn windowModality(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::frameSize()`
	#[allow(non_snake_case)]
	pub fn frameSize(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::minimumSize()`
	#[allow(non_snake_case)]
	pub fn minimumSize(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::move(arg0)`
	#[allow(non_snake_case)]
	pub fn move0(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setCursor(arg0)`
	#[allow(non_snake_case)]
	pub fn setCursor(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setContentsMargins(margins)`
	#[allow(non_snake_case)]
	pub fn setContentsMargins0(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::addActions(actions)`
	#[allow(non_snake_case)]
	pub fn addActions(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setWindowModality(windowModality)`
	#[allow(non_snake_case)]
	pub fn setWindowModality(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::pos()`
	#[allow(non_snake_case)]
	pub fn pos(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::windowOpacity()`
	#[allow(non_snake_case)]
	pub fn windowOpacity(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::previousInFocusChain()`
	#[allow(non_snake_case)]
	pub fn previousInFocusChain(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::focusProxy()`
	#[allow(non_snake_case)]
	pub fn focusProxy(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::mapToParent(pos)`
	#[allow(non_snake_case)]
	pub fn mapToParent(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::layoutDirection()`
	#[allow(non_snake_case)]
	pub fn layoutDirection(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::overrideWindowFlags(flags)`
	#[allow(non_snake_case)]
	pub fn overrideWindowFlags(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::contentsRect()`
	#[allow(non_snake_case)]
	pub fn contentsRect(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setupUi(widget)`
	#[allow(non_snake_case)]
	pub fn setupUi(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::size()`
	#[allow(non_snake_case)]
	pub fn size(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::resize(arg0)`
	#[allow(non_snake_case)]
	pub fn resize0(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::style()`
	#[allow(non_snake_case)]
	pub fn style(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::ungrabGesture(gesture)`
	#[allow(non_snake_case)]
	pub fn ungrabGesture(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setPalette(arg0)`
	#[allow(non_snake_case)]
	pub fn setPalette(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setFocus(reason)`
	#[allow(non_snake_case)]
	pub fn setFocus1(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::isVisibleTo(ancestor)`
	#[allow(non_snake_case)]
	pub fn isVisibleTo(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::mapFromParent(pos)`
	#[allow(non_snake_case)]
	pub fn mapFromParent(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setMinimumSize(arg0)`
	#[allow(non_snake_case)]
	pub fn setMinimumSize0(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::layout()`
	#[allow(non_snake_case)]
	pub fn layout(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::cursor()`
	#[allow(non_snake_case)]
	pub fn cursor(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setFocusProxy(w)`
	#[allow(non_snake_case)]
	pub fn setFocusProxy(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setWindowIcon(icon)`
	#[allow(non_snake_case)]
	pub fn setWindowIcon(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::insertAction(before, action)`
	#[allow(non_snake_case)]
	pub fn insertAction(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::mapTo(parent, pos)`
	#[allow(non_snake_case)]
	pub fn mapTo(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::grabMouse(cursor)`
	#[allow(non_snake_case)]
	pub fn grabMouse1(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::childAt(p)`
	#[allow(non_snake_case)]
	pub fn childAt0(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::childAt(x, y)`
	#[allow(non_snake_case)]
	pub fn childAt1(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::graphicsProxyWidget()`
	#[allow(non_snake_case)]
	pub fn graphicsProxyWidget(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::contextMenuPolicy()`
	#[allow(non_snake_case)]
	pub fn contextMenuPolicy(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::visibleRegion()`
	#[allow(non_snake_case)]
	pub fn visibleRegion(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setBaseSize(arg0)`
	#[allow(non_snake_case)]
	pub fn setBaseSize0(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setStyle(style)`
	#[allow(non_snake_case)]
	pub fn setStyle(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::windowFlags()`
	#[allow(non_snake_case)]
	pub fn windowFlags(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::normalGeometry()`
	#[allow(non_snake_case)]
	pub fn normalGeometry(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::actions()`
	#[allow(non_snake_case)]
	pub fn actions(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::saveGeometry()`
	#[allow(non_snake_case)]
	pub fn saveGeometry(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::window()`
	#[allow(non_snake_case)]
	pub fn window(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::mapFromGlobal(pos)`
	#[allow(non_snake_case)]
	pub fn mapFromGlobal(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::isAncestorOf(child)`
	#[allow(non_snake_case)]
	pub fn isAncestorOf(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::frameGeometry()`
	#[allow(non_snake_case)]
	pub fn frameGeometry(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::effectiveWinId()`
	#[allow(non_snake_case)]
	pub fn effectiveWinId(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::windowIconChanged(icon)`
	#[allow(non_snake_case)]
	pub fn windowIconChanged(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::stackUnder(w)`
	#[allow(non_snake_case)]
	pub fn stackUnder(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::windowState()`
	#[allow(non_snake_case)]
	pub fn windowState(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setContextMenuPolicy(policy)`
	#[allow(non_snake_case)]
	pub fn setContextMenuPolicy(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::render(target, targetOffset, sourceRegion, renderFlags)`
	#[allow(non_snake_case)]
	pub fn render0(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::render(painter, targetOffset, sourceRegion, renderFlags)`
	#[allow(non_snake_case)]
	pub fn render1(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setGeometry(arg0)`
	#[allow(non_snake_case)]
	pub fn setGeometry0(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::focusWidget()`
	#[allow(non_snake_case)]
	pub fn focusWidget(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::rect()`
	#[allow(non_snake_case)]
	pub fn rect(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setLayout(layout)`
	#[allow(non_snake_case)]
	pub fn setLayout(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setBackgroundRole(role)`
	#[allow(non_snake_case)]
	pub fn setBackgroundRole(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setMaximumSize(arg0)`
	#[allow(non_snake_case)]
	pub fn setMaximumSize0(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::geometry()`
	#[allow(non_snake_case)]
	pub fn geometry(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::contentsMargins()`
	#[allow(non_snake_case)]
	pub fn contentsMargins(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::customContextMenuRequested(pos)`
	#[allow(non_snake_case)]
	pub fn customContextMenuRequested(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setSizeIncrement(arg0)`
	#[allow(non_snake_case)]
	pub fn setSizeIncrement0(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::graphicsEffect()`
	#[allow(non_snake_case)]
	pub fn graphicsEffect(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::backgroundRole()`
	#[allow(non_snake_case)]
	pub fn backgroundRole(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::winId()`
	#[allow(non_snake_case)]
	pub fn winId(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::font()`
	#[allow(non_snake_case)]
	pub fn font(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::grab(rectangle)`
	#[allow(non_snake_case)]
	pub fn grab(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setWindowState(windowState)`
	#[allow(non_snake_case)]
	pub fn setWindowState(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setParent(parent)`
	#[allow(non_snake_case)]
	pub fn setParent0(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setParent(parent, f)`
	#[allow(non_snake_case)]
	pub fn setParent1(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setGraphicsEffect(effect)`
	#[allow(non_snake_case)]
	pub fn setGraphicsEffect(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::insertActions(before, actions)`
	#[allow(non_snake_case)]
	pub fn insertActions(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::inputMethodQuery(query)`
	#[allow(non_snake_case)]
	pub fn inputMethodQuery(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setWindowOpacity(level)`
	#[allow(non_snake_case)]
	pub fn setWindowOpacity(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::childrenRect()`
	#[allow(non_snake_case)]
	pub fn childrenRect(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::isEnabledTo(ancestor)`
	#[allow(non_snake_case)]
	pub fn isEnabledTo(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::foregroundRole()`
	#[allow(non_snake_case)]
	pub fn foregroundRole(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setWindowFlags(type_)`
	#[allow(non_snake_case)]
	pub fn setWindowFlags(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::windowHandle()`
	#[allow(non_snake_case)]
	pub fn windowHandle(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::maximumSize()`
	#[allow(non_snake_case)]
	pub fn maximumSize(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::nativeParentWidget()`
	#[allow(non_snake_case)]
	pub fn nativeParentWidget(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setSizePolicy(arg0)`
	#[allow(non_snake_case)]
	pub fn setSizePolicy0(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setSizePolicy(horizontal, vertical)`
	#[allow(non_snake_case)]
	pub fn setSizePolicy1(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::focusPolicy()`
	#[allow(non_snake_case)]
	pub fn focusPolicy(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::parentWidget()`
	#[allow(non_snake_case)]
	pub fn parentWidget(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::addAction(action)`
	#[allow(non_snake_case)]
	pub fn addAction(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setFocusPolicy(policy)`
	#[allow(non_snake_case)]
	pub fn setFocusPolicy(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setFixedSize(s)`
	#[allow(non_snake_case)]
	pub fn setFixedSize1(&self) -> ! {
		unimplemented!();
	}

	/// **Unimplemented:** `QWidget::setFont(arg0)`
	#[allow(non_snake_case)]
	pub fn setFont(&self) -> ! {
		unimplemented!();
	}


	// SIGNALS

	#[allow(non_snake_case)]
	pub fn windowIconTextChanged<T>(&self, slot: T) -> Connection
		where T: IntoSlot<(QString)>
	{
		let slot = slot.into_slot();
		slot.connect(|to, closure| -> *mut c_void
		{
			unsafe { glue::_qrust_qwidget_C_windowIconTextChanged(self.0, to, closure as c_int) }
		})
	}

	#[allow(non_snake_case)]
	pub fn windowTitleChanged<T>(&self, slot: T) -> Connection
		where T: IntoSlot<(QString)>
	{
		let slot = slot.into_slot();
		slot.connect(|to, closure| -> *mut c_void
		{
			unsafe { glue::_qrust_qwidget_C_windowTitleChanged(self.0, to, closure as c_int) }
		})
	}

}

impl AsQPtr for QWidget {
	fn qptr(&self) -> QPtr { self.0 }
	fn set_qptr(&mut self, qptr: QPtr) { self.0 = qptr; }
}


// SIGNAL CLOSURE TRAMPOLINES

#[no_mangle]
#[doc(hidden)]
#[allow(non_snake_case)]
pub extern fn _qrust_qwidget_T_windowIconTextChanged(callback: TraitObject, iconText: *mut c_void) {
	let cb: Box<Fn(QString) + 'static> = unsafe { Box::from_raw(mem::transmute(callback)) };
	cb(QString(iconText));
	mem::forget(cb);
}

#[no_mangle]
#[doc(hidden)]
#[allow(non_snake_case)]
pub extern fn _qrust_qwidget_T_windowTitleChanged(callback: TraitObject, title: *mut c_void) {
	let cb: Box<Fn(QString) + 'static> = unsafe { Box::from_raw(mem::transmute(callback)) };
	cb(QString(title));
	mem::forget(cb);
}



// SIGNAL CLOSURE DROPS

#[no_mangle]
#[doc(hidden)]
#[allow(non_snake_case)]
pub extern fn _qrust_qwidget_D_windowIconTextChanged(callback: TraitObject) {
	let _cb: Box<Fn(QString) + 'static> = unsafe { Box::from_raw(mem::transmute(callback)) };
}

#[no_mangle]
#[doc(hidden)]
#[allow(non_snake_case)]
pub extern fn _qrust_qwidget_D_windowTitleChanged(callback: TraitObject) {
	let _cb: Box<Fn(QString) + 'static> = unsafe { Box::from_raw(mem::transmute(callback)) };
}









pub trait RepaintArgs {
	fn call(&self, QPtr);
}

impl RepaintArgs for () {
	fn call(&self, qptr: QPtr) {
		return unsafe { glue::_qrust_qwidget_m_repaint0(qptr) };
	}
}

impl RepaintArgs for (i32, i32, i32, i32) {
	fn call(&self, qptr: QPtr) {
		return unsafe { glue::_qrust_qwidget_m_repaint3(
			qptr, self.0 as c_int, self.1 as c_int, self.2 as c_int, self.3 as c_int) };
	}
}



use std::ops::Deref;
use std::sync::atomic::{AtomicPtr, Ordering};

use ::qr_core::{QDefault, QString};


// TRAIT


#[allow(non_upper_case_globals)]
static _qrust_VWIDGET_VTABLE: AtomicPtr<()> = AtomicPtr::new(null_mut());

/// Virtual table for QWidget
pub trait VWidget: AsQPtr {

	#[doc(hidden)]
	unsafe fn _qrust_vtable() -> *const c_void {
		let vtable = _qrust_VWIDGET_VTABLE.load(Ordering::SeqCst);
		if !vtable.is_null() {
			return vtable as *const c_void;
		}

		let vtable = calloc(3, mem::size_of::<usize>());
		let vtable_array: *mut *mut c_void = mem::transmute(vtable);
		*vtable_array.offset(0) = mem::transmute(Self::heightForWidth as usize);
		*vtable_array.offset(1) = mem::transmute(Self::setVisible as usize);
		*vtable_array.offset(2) = mem::transmute(Self::hasHeightForWidth as usize);

		let prev = _qrust_VWIDGET_VTABLE.compare_and_swap(null_mut(), vtable as *mut (), Ordering::SeqCst);
		if prev.is_null() {
			vtable
		} else {
			// Someone created the vtable in the meantime
			free(vtable);
			prev as *const c_void
		}
	}

// VIRTUALS

	#[allow(non_snake_case)]
	fn heightForWidth(&self, w: i32) -> i32 {
		return unsafe { glue::_qrust_qwidget_v_heightForWidth(self.qptr(), w as c_int) } as i32;
	}

	#[allow(non_snake_case)]
	fn setVisible(&self, visible: bool) -> () {
		return unsafe { glue::_qrust_qwidget_v_setVisible(self.qptr(), visible as c_int) };
	}

	#[allow(non_snake_case)]
	fn hasHeightForWidth(&self) -> bool {
		return unsafe { glue::_qrust_qwidget_v_hasHeightForWidth(self.qptr()) } != 0;
	}

}


// VIRTUAL TRAMPOLINES

#[no_mangle]
#[doc(hidden)]
#[allow(non_snake_case)]
pub extern fn _qrust_vwidget_heightForWidth(ptr: FatPtr, w: c_int) -> c_int {
	let f: fn(*mut c_void, i32) -> i32 = unsafe { mem::transmute(ptr.p2) };
	return f(ptr.p1, w as i32) as c_int;
}

#[no_mangle]
#[doc(hidden)]
#[allow(non_snake_case)]
pub extern fn _qrust_vwidget_setVisible(ptr: FatPtr, visible: c_int) -> () {
	let f: fn(*mut c_void, bool) -> () = unsafe { mem::transmute(ptr.p2) };
	return f(ptr.p1, visible != 0);
}

#[no_mangle]
#[doc(hidden)]
#[allow(non_snake_case)]
pub extern fn _qrust_vwidget_hasHeightForWidth(ptr: FatPtr) -> c_int {
	let f: fn(*mut c_void) -> bool = unsafe { mem::transmute(ptr.p2) };
	return f(ptr.p1) as c_int;
}



// TRAIT IMPL

impl VWidget for QWidget {
	fn heightForWidth(&self, w: i32) -> i32 {
		return unsafe { glue::_qrust_qwidget_m_heightForWidth(self.0, w as c_int) } as i32;
	}

	fn setVisible(&self, visible: bool) -> () {
		return unsafe { glue::_qrust_qwidget_m_setVisible(self.0, visible as c_int) };
	}

	fn hasHeightForWidth(&self) -> bool {
		return unsafe { glue::_qrust_qwidget_m_hasHeightForWidth(self.0) } != 0;
	}

}

impl<'a, T: VWidget> VWidget for QDefault<&'a T> {}


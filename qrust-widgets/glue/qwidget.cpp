// Do not edit this file, it is auto-generated!

// Generated by qrust-gen
// Generator: GQObjectVtable
// Template:  qobject_vtable_cpp.mako
// Timestamp: 2016-08-07T09:35:27Z

#include <iostream>
#include <QtWidgets/QWidget>
#include "common.h"

// FIXME: TMP
using std::cout;
using std::endl;


// MEMBER TRAMPOLINES




extern "C" void* _qrust_qwidget_m_accessibleName(void* self) {
	return qshared2voidptr(static_cast<QWidget*>(self)->accessibleName());
}
extern "C" void _qrust_qwidget_m_setWindowTitle(void* self, void* arg0) {
	return static_cast<QWidget*>(self)->setWindowTitle(voidptr2qshared<QString>(arg0));
}
extern "C" int _qrust_qwidget_m_isMaximized(void* self) {
	return static_cast<QWidget*>(self)->isMaximized();
}
extern "C" void _qrust_qwidget_m_unsetLayoutDirection(void* self) {
	return static_cast<QWidget*>(self)->unsetLayoutDirection();
}
extern "C" void _qrust_qwidget_m_scroll0(void* self, int dx, int dy) {
	return static_cast<QWidget*>(self)->scroll(dx, dy);
}
extern "C" int _qrust_qwidget_m_width(void* self) {
	return static_cast<QWidget*>(self)->width();
}
extern "C" void _qrust_qwidget_m_setShortcutEnabled(void* self, int id, int enable) {
	return static_cast<QWidget*>(self)->setShortcutEnabled(id, enable);
}
extern "C" void _qrust_qwidget_m_repaint0(void* self) {
	return static_cast<QWidget*>(self)->repaint();
}
extern "C" void _qrust_qwidget_m_repaint3(void* self, int x, int y, int w, int h) {
	return static_cast<QWidget*>(self)->repaint(x, y, w, h);
}
extern "C" void _qrust_qwidget_m_hide(void* self) {
	return static_cast<QWidget*>(self)->hide();
}
extern "C" int _qrust_qwidget_m_hasFocus(void* self) {
	return static_cast<QWidget*>(self)->hasFocus();
}
extern "C" void _qrust_qwidget_m_activateWindow(void* self) {
	return static_cast<QWidget*>(self)->activateWindow();
}
extern "C" void _qrust_qwidget_m_update0(void* self) {
	return static_cast<QWidget*>(self)->update();
}
extern "C" void _qrust_qwidget_m_update3(void* self, int x, int y, int w, int h) {
	return static_cast<QWidget*>(self)->update(x, y, w, h);
}
extern "C" void _qrust_qwidget_m_setAccessibleName(void* self, void* name) {
	return static_cast<QWidget*>(self)->setAccessibleName(voidptr2qshared<QString>(name));
}
extern "C" void _qrust_qwidget_m_setStyleSheet(void* self, void* styleSheet) {
	return static_cast<QWidget*>(self)->setStyleSheet(voidptr2qshared<QString>(styleSheet));
}
extern "C" void* _qrust_qwidget_m_statusTip(void* self) {
	return qshared2voidptr(static_cast<QWidget*>(self)->statusTip());
}
extern "C" int _qrust_qwidget_m_close(void* self) {
	return static_cast<QWidget*>(self)->close();
}
extern "C" void* _qrust_qwidget_m_windowIconText(void* self) {
	return qshared2voidptr(static_cast<QWidget*>(self)->windowIconText());
}
extern "C" void _qrust_qwidget_m_setShortcutAutoRepeat(void* self, int id, int enable) {
	return static_cast<QWidget*>(self)->setShortcutAutoRepeat(id, enable);
}
extern "C" void _qrust_qwidget_m_setAccessibleDescription(void* self, void* description) {
	return static_cast<QWidget*>(self)->setAccessibleDescription(voidptr2qshared<QString>(description));
}
extern "C" void _qrust_qwidget_m_setWindowFilePath(void* self, void* filePath) {
	return static_cast<QWidget*>(self)->setWindowFilePath(voidptr2qshared<QString>(filePath));
}
extern "C" void _qrust_qwidget_m_move1(void* self, int x, int y) {
	return static_cast<QWidget*>(self)->move(x, y);
}
extern "C" void _qrust_qwidget_m_setContentsMargins1(void* self, int left, int top, int right, int bottom) {
	return static_cast<QWidget*>(self)->setContentsMargins(left, top, right, bottom);
}
extern "C" int _qrust_qwidget_m_hasMouseTracking(void* self) {
	return static_cast<QWidget*>(self)->hasMouseTracking();
}
extern "C" void _qrust_qwidget_m_setToolTipDuration(void* self, int msec) {
	return static_cast<QWidget*>(self)->setToolTipDuration(msec);
}
extern "C" void _qrust_qwidget_m_lower(void* self) {
	return static_cast<QWidget*>(self)->lower();
}
extern "C" int _qrust_qwidget_m_underMouse(void* self) {
	return static_cast<QWidget*>(self)->underMouse();
}
extern "C" void* _qrust_qwidget_m_toolTip(void* self) {
	return qshared2voidptr(static_cast<QWidget*>(self)->toolTip());
}
extern "C" int _qrust_qwidget_m_isModal(void* self) {
	return static_cast<QWidget*>(self)->isModal();
}
extern "C" int _qrust_qwidget_m_maximumHeight(void* self) {
	return static_cast<QWidget*>(self)->maximumHeight();
}
extern "C" int _qrust_qwidget_m_acceptDrops(void* self) {
	return static_cast<QWidget*>(self)->acceptDrops();
}
extern "C" void _qrust_qwidget_m_setDisabled(void* self, int disable) {
	return static_cast<QWidget*>(self)->setDisabled(disable);
}
extern "C" void _qrust_qwidget_m_resize1(void* self, int w, int h) {
	return static_cast<QWidget*>(self)->resize(w, h);
}
extern "C" int _qrust_qwidget_m_toolTipDuration(void* self) {
	return static_cast<QWidget*>(self)->toolTipDuration();
}
extern "C" void _qrust_qwidget_m_setFocus0(void* self) {
	return static_cast<QWidget*>(self)->setFocus();
}
extern "C" void _qrust_qwidget_m_setFixedHeight(void* self, int h) {
	return static_cast<QWidget*>(self)->setFixedHeight(h);
}
extern "C" void _qrust_qwidget_m_setMinimumSize1(void* self, int minw, int minh) {
	return static_cast<QWidget*>(self)->setMinimumSize(minw, minh);
}
extern "C" void _qrust_qwidget_m_setAutoFillBackground(void* self, int enabled) {
	return static_cast<QWidget*>(self)->setAutoFillBackground(enabled);
}
extern "C" int _qrust_qwidget_m_minimumHeight(void* self) {
	return static_cast<QWidget*>(self)->minimumHeight();
}
extern "C" void _qrust_qwidget_m_grabKeyboard(void* self) {
	return static_cast<QWidget*>(self)->grabKeyboard();
}
extern "C" void _qrust_qwidget_m_showNormal(void* self) {
	return static_cast<QWidget*>(self)->showNormal();
}
extern "C" void* _qrust_qwidget_m_windowRole(void* self) {
	return qshared2voidptr(static_cast<QWidget*>(self)->windowRole());
}
extern "C" void _qrust_qwidget_m_ensurePolished(void* self) {
	return static_cast<QWidget*>(self)->ensurePolished();
}
extern "C" int _qrust_qwidget_m_isVisible(void* self) {
	return static_cast<QWidget*>(self)->isVisible();
}
extern "C" void _qrust_qwidget_m_setStatusTip(void* self, void* arg0) {
	return static_cast<QWidget*>(self)->setStatusTip(voidptr2qshared<QString>(arg0));
}
extern "C" void _qrust_qwidget_m_showMaximized(void* self) {
	return static_cast<QWidget*>(self)->showMaximized();
}
extern "C" void _qrust_qwidget_m_grabMouse0(void* self) {
	return static_cast<QWidget*>(self)->grabMouse();
}
extern "C" void _qrust_qwidget_m_setWindowModified(void* self, int arg0) {
	return static_cast<QWidget*>(self)->setWindowModified(arg0);
}
extern "C" int _qrust_qwidget_m_maximumWidth(void* self) {
	return static_cast<QWidget*>(self)->maximumWidth();
}
extern "C" void _qrust_qwidget_m_setBaseSize1(void* self, int basew, int baseh) {
	return static_cast<QWidget*>(self)->setBaseSize(basew, baseh);
}
extern "C" void _qrust_qwidget_m_unsetLocale(void* self) {
	return static_cast<QWidget*>(self)->unsetLocale();
}
extern "C" void _qrust_qwidget_m_clearFocus(void* self) {
	return static_cast<QWidget*>(self)->clearFocus();
}
extern "C" int _qrust_qwidget_m_isFullScreen(void* self) {
	return static_cast<QWidget*>(self)->isFullScreen();
}
extern "C" void _qrust_qwidget_m_setEnabled(void* self, int arg0) {
	return static_cast<QWidget*>(self)->setEnabled(arg0);
}
extern "C" void _qrust_qwidget_m_show(void* self) {
	return static_cast<QWidget*>(self)->show();
}
extern "C" int _qrust_qwidget_m_y(void* self) {
	return static_cast<QWidget*>(self)->y();
}
extern "C" void _qrust_qwidget_m_showMinimized(void* self) {
	return static_cast<QWidget*>(self)->showMinimized();
}
extern "C" void _qrust_qwidget_m_unsetCursor(void* self) {
	return static_cast<QWidget*>(self)->unsetCursor();
}
extern "C" void _qrust_qwidget_m_setWindowIconText(void* self, void* arg0) {
	return static_cast<QWidget*>(self)->setWindowIconText(voidptr2qshared<QString>(arg0));
}
extern "C" void _qrust_qwidget_m_setMouseTracking(void* self, int enable) {
	return static_cast<QWidget*>(self)->setMouseTracking(enable);
}
extern "C" void* _qrust_qwidget_m_accessibleDescription(void* self) {
	return qshared2voidptr(static_cast<QWidget*>(self)->accessibleDescription());
}
extern "C" int _qrust_qwidget_m_isEnabled(void* self) {
	return static_cast<QWidget*>(self)->isEnabled();
}
extern "C" void _qrust_qwidget_m_releaseMouse(void* self) {
	return static_cast<QWidget*>(self)->releaseMouse();
}
extern "C" int _qrust_qwidget_m_isWindow(void* self) {
	return static_cast<QWidget*>(self)->isWindow();
}
extern "C" void _qrust_qwidget_m_setGeometry1(void* self, int x, int y, int w, int h) {
	return static_cast<QWidget*>(self)->setGeometry(x, y, w, h);
}
extern "C" void _qrust_qwidget_m_setMinimumWidth(void* self, int minw) {
	return static_cast<QWidget*>(self)->setMinimumWidth(minw);
}
extern "C" int _qrust_qwidget_m_isHidden(void* self) {
	return static_cast<QWidget*>(self)->isHidden();
}
extern "C" void _qrust_qwidget_m_releaseKeyboard(void* self) {
	return static_cast<QWidget*>(self)->releaseKeyboard();
}
extern "C" int _qrust_qwidget_m_updatesEnabled(void* self) {
	return static_cast<QWidget*>(self)->updatesEnabled();
}
extern "C" int _qrust_qwidget_m_minimumWidth(void* self) {
	return static_cast<QWidget*>(self)->minimumWidth();
}
extern "C" void _qrust_qwidget_m_setAcceptDrops(void* self, int on) {
	return static_cast<QWidget*>(self)->setAcceptDrops(on);
}
extern "C" void _qrust_qwidget_m_updateGeometry(void* self) {
	return static_cast<QWidget*>(self)->updateGeometry();
}
extern "C" int _qrust_qwidget_m_isWindowModified(void* self) {
	return static_cast<QWidget*>(self)->isWindowModified();
}
extern "C" void _qrust_qwidget_m_setMaximumSize1(void* self, int maxw, int maxh) {
	return static_cast<QWidget*>(self)->setMaximumSize(maxw, maxh);
}
extern "C" void* _qrust_qwidget_m_styleSheet(void* self) {
	return qshared2voidptr(static_cast<QWidget*>(self)->styleSheet());
}
extern "C" void _qrust_qwidget_m_setToolTip(void* self, void* arg0) {
	return static_cast<QWidget*>(self)->setToolTip(voidptr2qshared<QString>(arg0));
}
extern "C" void _qrust_qwidget_m_setSizeIncrement1(void* self, int w, int h) {
	return static_cast<QWidget*>(self)->setSizeIncrement(w, h);
}
extern "C" void* _qrust_qwidget_m_windowFilePath(void* self) {
	return qshared2voidptr(static_cast<QWidget*>(self)->windowFilePath());
}
extern "C" void _qrust_qwidget_m_setMaximumWidth(void* self, int maxw) {
	return static_cast<QWidget*>(self)->setMaximumWidth(maxw);
}
extern "C" void _qrust_qwidget_m_setHidden(void* self, int hidden) {
	return static_cast<QWidget*>(self)->setHidden(hidden);
}
extern "C" void _qrust_qwidget_m_showFullScreen(void* self) {
	return static_cast<QWidget*>(self)->showFullScreen();
}
extern "C" void* _qrust_qwidget_m_whatsThis(void* self) {
	return qshared2voidptr(static_cast<QWidget*>(self)->whatsThis());
}
extern "C" void _qrust_qwidget_m_releaseShortcut(void* self, int id) {
	return static_cast<QWidget*>(self)->releaseShortcut(id);
}
extern "C" void _qrust_qwidget_m_setWhatsThis(void* self, void* arg0) {
	return static_cast<QWidget*>(self)->setWhatsThis(voidptr2qshared<QString>(arg0));
}
extern "C" void _qrust_qwidget_m_setMaximumHeight(void* self, int maxh) {
	return static_cast<QWidget*>(self)->setMaximumHeight(maxh);
}
extern "C" void _qrust_qwidget_m_setUpdatesEnabled(void* self, int enable) {
	return static_cast<QWidget*>(self)->setUpdatesEnabled(enable);
}
extern "C" void _qrust_qwidget_m_adjustSize(void* self) {
	return static_cast<QWidget*>(self)->adjustSize();
}
extern "C" int _qrust_qwidget_m_isEnabledToTLW(void* self) {
	return static_cast<QWidget*>(self)->isEnabledToTLW();
}
extern "C" int _qrust_qwidget_m_isTopLevel(void* self) {
	return static_cast<QWidget*>(self)->isTopLevel();
}
extern "C" void _qrust_qwidget_m_setMinimumHeight(void* self, int minh) {
	return static_cast<QWidget*>(self)->setMinimumHeight(minh);
}
extern "C" int _qrust_qwidget_m_isActiveWindow(void* self) {
	return static_cast<QWidget*>(self)->isActiveWindow();
}
extern "C" void* _qrust_qwidget_m_windowTitle(void* self) {
	return qshared2voidptr(static_cast<QWidget*>(self)->windowTitle());
}
extern "C" void _qrust_qwidget_m_raise(void* self) {
	return static_cast<QWidget*>(self)->raise();
}
extern "C" int _qrust_qwidget_m_x(void* self) {
	return static_cast<QWidget*>(self)->x();
}
extern "C" int _qrust_qwidget_m_height(void* self) {
	return static_cast<QWidget*>(self)->height();
}
extern "C" void _qrust_qwidget_m_clearMask(void* self) {
	return static_cast<QWidget*>(self)->clearMask();
}
extern "C" void _qrust_qwidget_m_setFixedWidth(void* self, int w) {
	return static_cast<QWidget*>(self)->setFixedWidth(w);
}
extern "C" void _qrust_qwidget_m_setFixedSize0(void* self, int w, int h) {
	return static_cast<QWidget*>(self)->setFixedSize(w, h);
}
extern "C" int _qrust_qwidget_m_isMinimized(void* self) {
	return static_cast<QWidget*>(self)->isMinimized();
}
extern "C" void _qrust_qwidget_m_setWindowRole(void* self, void* role) {
	return static_cast<QWidget*>(self)->setWindowRole(voidptr2qshared<QString>(role));
}
extern "C" int _qrust_qwidget_m_autoFillBackground(void* self) {
	return static_cast<QWidget*>(self)->autoFillBackground();
}


// SLOTS:

const char* _qrust_qwidget_S_close = SLOT(close());


// SIGNALS:

extern "C" void _qrust_qwidget_T_windowIconTextChanged(TraitObject, void*);
extern "C" void _qrust_qwidget_D_windowIconTextChanged(TraitObject);

class QWidget_windowIconTextChanged: public Signal
{
public:
	QWidget_windowIconTextChanged(TraitObject callback) :Signal(callback) {}
	virtual ~QWidget_windowIconTextChanged() { _qrust_qwidget_D_windowIconTextChanged(callback); }
public slots:
	void trampoline(const QString & iconText)
	{
		cout << "QWidget_windowIconTextChanged::trampoline" << endl;
		_qrust_qwidget_T_windowIconTextChanged(callback, qshared2voidptr(iconText));
	}
};

extern "C" void* _qrust_qwidget_C_windowIconTextChanged(void* obj, TraitObject data, int closure)
{
	return Connection::connect<QWidget, QWidget_windowIconTextChanged>(
		obj, data, closure,
		&QWidget::windowIconTextChanged, SIGNAL(windowIconTextChanged(const QString &)));
}
extern "C" void _qrust_qwidget_T_windowTitleChanged(TraitObject, void*);
extern "C" void _qrust_qwidget_D_windowTitleChanged(TraitObject);

class QWidget_windowTitleChanged: public Signal
{
public:
	QWidget_windowTitleChanged(TraitObject callback) :Signal(callback) {}
	virtual ~QWidget_windowTitleChanged() { _qrust_qwidget_D_windowTitleChanged(callback); }
public slots:
	void trampoline(const QString & title)
	{
		cout << "QWidget_windowTitleChanged::trampoline" << endl;
		_qrust_qwidget_T_windowTitleChanged(callback, qshared2voidptr(title));
	}
};

extern "C" void* _qrust_qwidget_C_windowTitleChanged(void* obj, TraitObject data, int closure)
{
	return Connection::connect<QWidget, QWidget_windowTitleChanged>(
		obj, data, closure,
		&QWidget::windowTitleChanged, SIGNAL(windowTitleChanged(const QString &)));
}



#include "qwidget.h"

// CONSTRUCTORS


extern "C" void* _qrust_qwidget_c_1(void* vself, void* vtable) {
	return new VWidget(vself, static_cast<void**>(vtable));
}


// VIRTUAL MEMBER TRAMPOLINES

extern "C" int _qrust_qwidget_m_heightForWidth(void* self, int w) {
	return static_cast<VWidget*>(self)->heightForWidth(w);
}

extern "C" void _qrust_qwidget_m_setVisible(void* self, int visible) {
	return static_cast<VWidget*>(self)->setVisible(visible);
}

extern "C" int _qrust_qwidget_m_hasHeightForWidth(void* self) {
	return static_cast<VWidget*>(self)->hasHeightForWidth();
}



// TRAIT TRAMPOLINES

extern "C" int _qrust_vwidget_heightForWidth(FatPtr, int);
extern "C" void _qrust_vwidget_setVisible(FatPtr, int);
extern "C" int _qrust_vwidget_hasHeightForWidth(FatPtr);


// CLASS VIRTUALS

int VWidget::heightForWidth(int w) const {
	FatPtr ptr = { vself, vtable[0] };
	return _qrust_vwidget_heightForWidth(ptr, w);
}

void VWidget::setVisible(bool visible) {
	FatPtr ptr = { vself, vtable[1] };
	return _qrust_vwidget_setVisible(ptr, visible);
}

bool VWidget::hasHeightForWidth() const {
	FatPtr ptr = { vself, vtable[2] };
	return _qrust_vwidget_hasHeightForWidth(ptr);
}



// VIRTUAL DEFAULT TRAMPOLINES

extern "C" int _qrust_qwidget_v_heightForWidth(void* self, int w) {
	return static_cast<VWidget*>(self)->QWidget::heightForWidth(w);
}

extern "C" void _qrust_qwidget_v_setVisible(void* self, int visible) {
	return static_cast<VWidget*>(self)->QWidget::setVisible(visible);
}

extern "C" int _qrust_qwidget_v_hasHeightForWidth(void* self) {
	return static_cast<VWidget*>(self)->QWidget::hasHeightForWidth();
}


// DEFAULT VTABLE

const void *VWidget::vtable_default[] = {
	reinterpret_cast<void*>(&_qrust_qwidget_v_heightForWidth),
	reinterpret_cast<void*>(&_qrust_qwidget_v_setVisible),
	reinterpret_cast<void*>(&_qrust_qwidget_v_hasHeightForWidth),
};


import os
import importlib
from datetime import datetime
from mako.lookup import TemplateLookup as MakoLookup


QR_PREFIX = "_qrust"


class Template(object):
	def __init__(self, dir):
		cwd = os.path.dirname(os.path.realpath(__file__))
		self.lookup = MakoLookup(
			directories=[ "{}/{}".format(cwd, dir) ],
			module_directory="{}/{}/.cache".format(cwd, dir)
		);

	def get(self, name):
		return self.lookup.get_template(name + ".mako")


template = Template("templates")


# This is needed because ${next.body()} is not defined by Mako when rendering templates
# with no parent which causes trouble when rendering base templates
class FakeNext(object):
	def body(self):
		return ""

class Generator(object):
	def __init__(self, qtmod, klass=None):
		self.targs = []
		self.qtmod = qtmod
		self.data = {
			"QR": QR_PREFIX,
			"qtmod": qtmod.name,
			"qr_core": "" if qtmod.name == "core" else "::qr_core",
			"next": FakeNext(),
		}
		self.klass = klass
		if klass is not None:
			self.lklass = klass.name.lower()
			self.data["klass"] = klass.name
			self.data["brief"] = klass.brief

	def setTargets(self, targs):
		self.targs = targs;

	def addModFiles(self):
		pass

	def addTypes(self, typemap):
		pass

	# def loadFns(self):
	# 	if self.klass is not None:
	# 		self.klass.loadFns()

	def header(self, tpl):
		def closure(comment="//"):
			return """\
{0} Do not edit this file, it is auto-generated!

{0} Generated by qrust-gen
{0} Generator: {1}
{0} Template:  {2}.mako
{0} Timestamp: {3}
""".format(comment, type(self).__name__, tpl,
			datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ'))
		return closure

	def render(self):
		self.setData()
		for (tpl, targ) in self.targs:
			self.data["header"] = self.header(tpl)
			tpl = template.get(tpl)
			rendered = tpl.render(**self.data)
			with open("{}/{}".format(self.qtmod.dir, targ), "w") as f:
				f.write(rendered)

def get(name):
	m = importlib.import_module("generators.{}".format(name))
	return m.get()
